"""problem config model and user access key model

Revision ID: fe2df95ee61a
Revises: 6c2a16b349b1
Create Date: 2021-11-26 04:06:10.843892

"""
import sqlalchemy as sa
import sqlmodel
import sqlmodel.sql.sqltypes
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "fe2df95ee61a"
down_revision = "6c2a16b349b1"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_access_keys",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("service", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("access_key_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "secret_access_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("service", "user_id"),
    )
    op.create_index(
        op.f("ix_user_access_keys_created_at"),
        "user_access_keys",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_access_keys_id"), "user_access_keys", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_user_access_keys_updated_at"),
        "user_access_keys",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        "problem_configs",
        sa.Column("languages", sa.JSON(), server_default="[]", nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("problem_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("committer_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column(
            "commit_id",
            sqlmodel.sql.sqltypes.AutoString(),
            server_default="",
            nullable=False,
        ),
        sa.Column("data_version", sa.Integer(), server_default="2", nullable=False),
        sa.ForeignKeyConstraint(["committer_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["problem_id"], ["problems.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_problem_configs_created_at"),
        "problem_configs",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_problem_configs_id"), "problem_configs", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_problem_configs_updated_at"),
        "problem_configs",
        ["updated_at"],
        unique=False,
    )
    op.drop_column("problems", "languages")
    op.drop_column("problems", "data_version")
    op.add_column(
        "records",
        sa.Column("toolchains", sa.JSON(), server_default="[]", nullable=False),
    )
    op.add_column(
        "records",
        sa.Column("problem_config_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
    )
    op.add_column(
        "records",
        sa.Column("committer_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
    )
    op.add_column(
        "records", sa.Column("judger_id", sqlmodel.sql.sqltypes.GUID(), nullable=True)
    )
    op.add_column(
        "records",
        sa.Column(
            "state",
            sqlmodel.sql.sqltypes.AutoString(),
            server_default="processing",
            nullable=False,
        ),
    )
    op.add_column(
        "records",
        sa.Column(
            "language",
            sqlmodel.sql.sqltypes.AutoString(),
            server_default="",
            nullable=False,
        ),
    )
    op.alter_column("records", "score", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("records", "time_ms", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("records", "memory_kb", existing_type=sa.INTEGER(), nullable=False)
    op.drop_index("ix_records_commit_id", table_name="records")
    op.drop_index("ix_records_memory_kb", table_name="records")
    op.drop_index("ix_records_score", table_name="records")
    op.drop_index("ix_records_status", table_name="records")
    op.drop_index("ix_records_time_ms", table_name="records")
    op.drop_constraint("records_user_id_fkey", "records", type_="foreignkey")
    op.create_foreign_key(
        None, "records", "users", ["judger_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None, "records", "users", ["committer_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        None,
        "records",
        "problem_configs",
        ["problem_config_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.drop_column("records", "user_id")
    op.drop_column("records", "status")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "records", sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "records",
        sa.Column("user_id", postgresql.UUID(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "records", type_="foreignkey")
    op.drop_constraint(None, "records", type_="foreignkey")
    op.drop_constraint(None, "records", type_="foreignkey")
    op.create_foreign_key(
        "records_user_id_fkey",
        "records",
        "users",
        ["user_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_index("ix_records_time_ms", "records", ["time_ms"], unique=False)
    op.create_index("ix_records_status", "records", ["status"], unique=False)
    op.create_index("ix_records_score", "records", ["score"], unique=False)
    op.create_index("ix_records_memory_kb", "records", ["memory_kb"], unique=False)
    op.create_index("ix_records_commit_id", "records", ["commit_id"], unique=False)
    op.alter_column("records", "memory_kb", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("records", "time_ms", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("records", "score", existing_type=sa.INTEGER(), nullable=True)
    op.drop_column("records", "language")
    op.drop_column("records", "state")
    op.drop_column("records", "judger_id")
    op.drop_column("records", "committer_id")
    op.drop_column("records", "problem_config_id")
    op.drop_column("records", "toolchains")
    op.add_column(
        "problems",
        sa.Column("data_version", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "problems",
        sa.Column("languages", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.drop_index(op.f("ix_problem_configs_updated_at"), table_name="problem_configs")
    op.drop_index(op.f("ix_problem_configs_id"), table_name="problem_configs")
    op.drop_index(op.f("ix_problem_configs_created_at"), table_name="problem_configs")
    op.drop_table("problem_configs")
    op.drop_index(op.f("ix_user_access_keys_updated_at"), table_name="user_access_keys")
    op.drop_index(op.f("ix_user_access_keys_id"), table_name="user_access_keys")
    op.drop_index(op.f("ix_user_access_keys_created_at"), table_name="user_access_keys")
    op.drop_table("user_access_keys")
    # ### end Alembic commands ###
